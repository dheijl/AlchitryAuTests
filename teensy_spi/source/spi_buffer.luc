module spi_buffer (
    input clk, // 300 MHz "fast" clock from clock wizard
    input slow_clk, // 100 MHz "slow" normal clock
    input rst,  // reset
    input sck,     // spi clock
    input sdi,     // spi mosi
    input cs,      // spi slave select
    input data_in[8], // data to transmit for fifo_in
    input data_in_newdata, // new data available
    output data_in_full, // space available in fifo_in
    output sdo,    // spi miso
    output data_out[8], // received spi data from fifo_out 
    output data_rdy  // spi rcv fifo not empty
) {
    /*
    SPI Mode 0 = CPOL 0 CPHA 0
    SPI Mode 1 = CPOL 0 CPHA 1
    SPI Mode 2 = CPOL 1 CPHA 0
    SPI Mode 3 = CPOL 1 CPHA 1
    */    
 
    fifo_256 fifo_out(.rst(rst), .rd_clk(slow_clk), .wr_clk(clk) ) // SPI data received 
    fifo_256 fifo_in(.rst(rst), .rd_clk(clk), .wr_clk(slow_clk))   // data to transmit
   
    .clk(clk) {
        .rst(rst) {
            spi_peripheral spi (#CPOL(0), #CPHA(1), 
                .cs(cs), 
                .sck(sck), 
                .sdi(sdi))
            
            dff spi_rx[8]
            dff spi_tx[8]
        }
        dff have_input
        dff have_output
        dff rdy            // the SPI char ready flag
        dff spi_active
        dff data_in_reg[8]
        dff new_data_in_reg
        dff data_out_reg[8]
    }
    
    always {
        
        // connect spi
        sdo = spi.sdo
        spi_active.d = ~cs
        
        // initialize output fifo
        fifo_out.wr_en = 1b0
        fifo_out.din = 8h00
        fifo_out.rd_en = 1b0
        
        // initialize input fifo
        fifo_in.wr_en = 1b0
        fifo_in.din = 8h00
        fifo_in.rd_en = 1b0
        
        // drive outputs
        data_out = data_out_reg.q
        data_rdy = rdy.q
        data_in_full =  fifo_in.full
        
        // buffer inputs
        data_in_reg.d = data_in
        new_data_in_reg.d = data_in_newdata
        
        // store input char to transmit in tx fifo
        // and trigger tx on fifo full or newline 
        if (new_data_in_reg.q && !fifo_in.full) {
            fifo_in.din = data_in_reg.q
            fifo_in.wr_en = 1b1
        }
        // return received SPI bytes from rx fifo
        if (!fifo_out.empty) {
            data_out_reg.d = fifo_out.dout
            rdy.d = 1b1
            fifo_out.rd_en = 1b1
        } else {
            data_out_reg.d = 8hff
            rdy.d = 1b0
        }
        // store received SPI bytes in rx fifo
        if (!fifo_out.full && have_output.q) {
            fifo_out.din = spi_rx.q
            fifo_out.wr_en = 1b1
            have_output.d = 1b0
        }
        
        // check transmit queue
        if (!have_input.q) {
            if (fifo_in.empty) {
                // nothing to transmit
                spi_tx.d = 8hff
                // but can be replaced from fifo_in before spi tx starts
                have_input.d = 1b0
            } else { // prepare the next SPI tx byte
                spi_tx.d = fifo_in.dout
                fifo_in.rd_en = 1b1
                have_input.d = 1b1
            }
        }
        
        // make sure the first byte is ready when SPI transfer starts
        spi.data_in = spi_tx.q
        
        if (spi_active.q) { // SPI active
            if (spi.done) {
                // store received spi char 
                spi_rx.d = spi.data_out
                // get the next SPI tx byte
                spi.data_in = spi_tx.q
                have_input.d = 1b0
                have_output.d = 1b1
            }
        } 
    } 
}
