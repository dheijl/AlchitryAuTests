module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    input sck,     // spi clock
    input sdi,     // spi mosi
    output sdo,    // spi miso
    input cs       // spi slave select
) {
    /*
    SPI Mode 0 = CPOL 0 CPHA 0
    SPI Mode 1 = CPOL 0 CPHA 1
    SPI Mode 2 = CPOL 1 CPHA 0
    SPI Mode 3 = CPOL 1 CPHA 1
    */    
    
    sig rst                 // reset signal
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        .rst(rst) {
            fifo echo (#WIDTH(8), #ENTRIES(256))
            fifo forward (#WIDTH(8), #ENTRIES(256))
            uart_rx rx (#BAUD(1000000), #CLK_FREQ(100000000))
            uart_tx tx (#BAUD(1000000), #CLK_FREQ(100000000))   
            spi_peripheral spi (#CPOL(0), #CPHA(1), .cs(cs), .sck(sck), .sdi(sdi))
        }
        dff tx_buf_rdy     // tx buffer contains the next transmit character flag
        dff tx_buf[8]      // the character to transmit
    }
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        // connect usb
        tx.block = 0
        rx.rx = usb_rx
        usb_tx = tx.tx
        
        // connect spi
        sdo = spi.sdo
        
        // init echo fifo
        echo.din = 0
        echo.wput = 0
        echo.rget = 0
        
        // init forward fifo
        forward.din =0
        forward.wput = 0
        forward.rget = 0
        
        // leds
        led[0] = echo.empty
        led[1] = echo.full
        led[2] = forward.empty
        led[3] = forward.full
        led[7] = cs
        led[6] = sck
        led[5] = 0
        led[4] = 0
        
        // echo eceived characters (spi or console) to console
        if (! echo.empty && !tx.busy ) {
            echo.rget = 1
            tx.data = echo.dout 
            tx.new_data = 1
        } else {
            tx.data = 0
            tx.new_data = 0
        }
        
        // store input from console in spi forward buffer
        if (rx.new_data && !echo.full) {
            echo.din = rx.data
            echo.wput = 1
            if (! forward.full)  {
                forward.din = rx.data
                forward.wput = 1
            }
        } 
        
        // make sure the first byte is ready when SPI transfer starts
        sig c[8] = 8hff
        if (!tx_buf_rdy.q) {
            if (!forward.empty) {
                forward.rget = 1
                c = forward.dout
            } 
            tx_buf.d = c
            tx_buf_rdy.d = 1   
        } 
        
        if (cs == 1) {                // if SPI idle
            spi.data_in = tx_buf.q    // prep first tx character
        } else {                      // SPI is busy
            // make sure we always have the next tx char ready
            if (! tx_buf_rdy.q) {
                // get next char to transmit from console fifo
                if (!forward.empty) {
                    forward.rget = 1
                    c = forward.dout
                } else {
                    c = 8hff
                }
                // make the next tx char available
                tx_buf.d = c
                tx_buf_rdy.d = 1
            }
            spi.data_in = tx_buf.q // make sure the tx character is available
            if (spi.done) {
                tx_buf_rdy.d = 0
                // store received spi char in console echo buffer
                if (!echo.full) {
                    echo.din = spi.data_out
                    echo.wput = 1
                }    
            } 
        }
    }    
}
