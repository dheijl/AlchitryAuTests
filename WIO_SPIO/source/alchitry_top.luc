module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    input sck,     // spi clock
    input sdi,     // spi mosi
    output sdo,    // spi miso
    input cs        // spi slave select
) {
    /*
    SPI Mode 0 = CPOL 0 CPHA 0
    SPI Mode 1 = CPOL 0 CPHA 1
    SPI Mode 2 = CPOL 1 CPHA 0
    SPI Mode 3 = CPOL 1 CPHA 1
    */    
    
    sig rst                 // reset signal
    clk_wiz_0 spi_clock(
        .reset(rst), 
        .clk_in1(clk)
    )
    spi_peripheral spi (#CPOL(0), #CPHA(1), 
        .clk(spi_clock.clk_out1),
        .rst(!spi_clock.locked),
        .hf_clk(spi_clock.clk_out2),
        .cs(cs), 
        .sck(sck), 
        .sdi(sdi))
    
    
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        .rst(rst) {
            fifo echo (#WIDTH(8), #ENTRIES(256))
            fifo forward (#WIDTH(8), #ENTRIES(256))
            uart_rx rx (#BAUD(1000000), #CLK_FREQ(100000000))
            uart_tx tx (#BAUD(1000000), #CLK_FREQ(100000000))   
        }
        dff tx_primed        // flag to prepare the first transmit character
        dff next_char[8]     // the character to transmit
    }
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        // connect usb
        tx.block = 0
        rx.rx = usb_rx
        usb_tx = tx.tx
        
        // connect spi
        sdo = spi.sdo
        
        // init echo fifo
        echo.din = 0
        echo.wput = 0
        echo.rget = 0
        
        // init forward fifo
        forward.din =0
        forward.wput = 0
        forward.rget = 0
        
        // leds
        led[0] = echo.empty
        led[1] = echo.full
        led[2] = forward.empty
        led[3] = forward.full
        led[7] = cs
        led[6] = sck
        led[5] = 0
        led[4] = 0
        
        // echo eceived characters (spi or console) to console
        if (! echo.empty && !tx.busy ) {
            echo.rget = 1
            tx.data = echo.dout 
            tx.new_data = 1
        } else {
            tx.data = 0
            tx.new_data = 0
        }
        
        // store input from console in spi forward buffer
        if (rx.new_data && !echo.full) {
            echo.din = rx.data
            echo.wput = 1
            if (! forward.full)  {
                forward.din = rx.data
                forward.wput = 1
            }
        } 
        
        // make sure the first byte is ready when SPI transfer starts
        sig c[8] = 8hff
        if (!tx_primed.q) {
            if (!forward.empty) {
                forward.rget = 1
                c = forward.dout
            } 
            tx_primed.d = 1   
            next_char.d = c
        } 
        
        if (cs == 1) {                // if not selected:
            spi.data_in = next_char.q // prep first tx character
        } else {                      // SPI busy
            spi.data_in = next_char.q // make sure the tx character is ready
            if (spi.done) {
                // for next char
                if (!forward.empty) {
                    forward.rget = 1
                    c = forward.dout
                } else {
                    c = 8hff
                }
                spi.data_in = c
                next_char.d = c
                // store received spi char in console echo buffer
                if (!echo.full) {
                    echo.din = spi.data_out
                    echo.wput = 1
                }    
            } 
        }
    }    
}
