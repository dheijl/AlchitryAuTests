module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    input sck,     // spi clock
    input sdi,     // spi mosi
    input cs,      // spi slave select
    output sdo,    // spi miso
) {
    
    sig rst                 // reset signal
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        .rst(rst) {
            fifo echo (#WIDTH(8), #ENTRIES(256))
            uart_rx rx (#BAUD(1000000), #CLK_FREQ(100000000))
            uart_tx tx (#BAUD(1000000), #CLK_FREQ(100000000))   
        }
    }
    
    clk_wiz_0 clkwiz(.clk_in1(clk), .reset(rst))
    
    spi_echo spiecho(
        .clk(clkwiz.clk_out2),
        .fst_clk(clkwiz.clk_out2),
        .slw_clk(clk),
        .rst(rst),
        .sck(sck),
        .sdi(sdi),
        .cs(cs)
    ) 
    
    
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        // connect spi
        sdo = spiecho.sdo
        
        // connect usb
        tx.block = 1b0
        rx.rx = usb_rx
        usb_tx = tx.tx
        
        
        // init echo fifo
        echo.din = 8h00
        echo.wput = 1b0
        echo.rget = 1b0
        
        // leds
        led[0] = echo.empty
        led[1] = echo.full
        led[2] = 1b0 
        led[3] = 1b0  
        led[4] = 1b0
        led[5] = 1b0 
        led[6] = sck
        led[7] = ~cs
        
        spiecho.data_rget = 0
        if (!spiecho.data_empty && !echo.full) {
            echo.din = spiecho.data_out
            echo.wput = 1b1
            spiecho.data_rget = 1b1
        }
        // echo eceived characters (spi or console) to console
        if (!echo.empty && !tx.busy ) {
            tx.data = echo.dout 
            tx.new_data = 1b1
            echo.rget = 1b1
        } else {
            tx.data = 1b0
            tx.new_data = 1b0
        }
        
        if (rx.new_data && !echo.full) {
            echo.din = rx.data
            echo.wput = 1b1
        } 
    }    
}
