module spi_echo (
    input clk,    // 100 MHz clock
    input fst_clk, // 200 MHz clock
    input rst,  // reset
    input sck,     // spi clock
    input sdi,     // spi mosi
    input cs,       // spi slave select
    output sdo,    // spi miso
    output data_out[8], // received spi data  
    input data_rget,   // spi data ready
    output data_empty,  // spi fifo empty
) {
    /*
    SPI Mode 0 = CPOL 0 CPHA 0
    SPI Mode 1 = CPOL 0 CPHA 1
    SPI Mode 2 = CPOL 1 CPHA 0
    SPI Mode 3 = CPOL 1 CPHA 1
    */    
    
    .clk(clk) {
        .rst(rst) {
        }
    }
    
    .clk(fst_clk) {
        .rst(rst) {
            spi_peripheral spi (#CPOL(0), #CPHA(1), 
                .cs(cs), 
                .sck(sck), 
                .sdi(sdi))
            
        }
        dff tx_buf[8]      // the character to transmit
        dff have_output
    }
    
    async_fifo fifo_out(#WIDTH(8), #ENTRIES(256),
        .wclk(fst_clk),
        .wrst(rst),
        .rclk(clk),
        .rrst(rst)
    )
    
    always {
        
        // connect spi
        sdo = spi.sdo
        
        // initialize output fifo
        fifo_out.wput = 1b0
        fifo_out.din = 8h00
        
        // connect output fifo
        data_empty = fifo_out.empty
        fifo_out.rget = data_rget
        data_out = fifo_out.dout

        data_empty = 1b1
        
        // make sure the first byte is ready when SPI transfer starts
        spi.data_in = tx_buf.q

        // store any received spi char in output fifo
        if (have_output.q) {
            // this takes too long and makes SPI miss clock cycles
            if (!fifo_out.full) {
                //fifo_out.din = tx_buf.q
                //fifo_out.wput = 1b1
            }
            // and this looses characters
            data_empty = 1b0
            data_out = tx_buf.q
            have_output.d = 1b0
        } 
        
        if (cs == 1b1) {        // SPI idle
            tx_buf.d = 8hff
        } else  {               // SPI active
            if (spi.done) {
                // echo received characters to SPI
                tx_buf.d = spi.data_out
                spi.data_in = tx_buf.q
                // output received spi char to the fifo
                have_output.d = 1b1
            } 
        } 
    }
}