module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    input sck,     // spi clock
    input sdi,     // spi mosi
    input cs,      // spi slave select
    output sdo,    // spi miso
    output drq     // SPI transfer request
) {
    
    sig rst                 // reset signal
    enum Spi_State{IDLE, REQUESTED, BUSY}
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        .rst(rst) {
            fifo echo (#WIDTH(8), #ENTRIES(256))
            uart_rx rx (#BAUD(1000000), #CLK_FREQ(100000000))
            uart_tx tx (#BAUD(1000000), #CLK_FREQ(100000000))  
            dff spi_state[$width(Spi_State)](#INIT(Spi_State.IDLE))
        }
        dff drq_reg
        dff spi_busy
    }
    
    
    spi_buffer spibuffer(#BUFFER_SIZE(256),
        .clk(clk),
        .rst(rst),
        .sck(sck),
        .sdi(sdi),
        .cs(cs)
    )
    
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        // connect spi
        sdo = spibuffer.sdo
        drq = drq_reg.q
        spi_busy.d =  ~cs
        
        // connect usb
        tx.block = 1b0
        rx.rx = usb_rx
        usb_tx = tx.tx
        
        
        // init echo fifo
        echo.din = 8h00
        echo.wput = 1b0
        echo.rget = 1b0
        
        // init spibuffer
        spibuffer.data_in = 8h0
        spibuffer.data_in_newdata = 1b0
        
        // leds
        led[0] = echo.empty
        led[1] = echo.full
        led[2] = spibuffer.data_rdy 
        led[3] = spibuffer.data_in_full  
        led[4] = drq_reg.q
        led[5] = 1b0 
        led[6] = sck
        led[7] = ~cs
        
        // put received console characters in console echo buffer 
        // and in SPI transmit buffer
        // assert drq if buffer full or newline to request spi transfer
        case (spi_state.q) {
            Spi_State.IDLE: 
                // spi not busy, gather input 
                // assert drq on newline or buffer full to trigger SPI transfer
                if (rx.new_data && !echo.full) {                
                    echo.din = rx.data
                    echo.wput = 1b1
                    if (!spibuffer.data_in_full) {
                        spibuffer.data_in = rx.data
                        spibuffer.data_in_newdata = 1b1
                        if (rx.data == 8h0a) {
                            drq_reg.d = 1b1
                            spi_state.d = Spi_State.REQUESTED
                        }
                    } else {
                        drq_reg.d = 1b1
                        spi_state.d = Spi_State.REQUESTED
                    }
                }
            Spi_State.REQUESTED:
                // wait for chip select 
                if (spi_busy.q) {
                    spi_state.d = Spi_State.BUSY
                } 
            Spi_State.BUSY:
                // deassert drq, SPI transfer has started
               drq_reg.d = 1b0
               // put received SPI characters in console echo buffer
                if (spibuffer.data_rdy && !echo.full) {
                    echo.din = spibuffer.data_out
                    echo.wput = 1b1
                }
                // if transfer complete: deassert drq
                if (!spi_busy.q) {
                    spi_state.d = Spi_State.IDLE
                 } 
            default:
                spi_state.d = Spi_State.IDLE
                drq_reg.d = 1b0
        }
        
        // echo received characters (spi or console) to console
        if (!echo.empty && !tx.busy) {
            tx.data = echo.dout 
            tx.new_data = 1b1
            echo.rget = 1b1
        } else {
            tx.data = 1b0
            tx.new_data = 1b0
        }
    }    
}
