// WIP: a simple adder for 2 4-digits inputs with ovrerflow indication
// up/down button increment/decrement the currently selected digit
// left/right button select the next/previous digit
// center button controls state:
// enter a => enter b => show sum => enter a etc...
// the currently selected digit is shown on leds[3:0]
// the currently selected digit value is shown 
//     - on io_leds[0][3:0] 
//     - on the seven segment display
// the sum is shown on the 7 segment display 
// until the center button is pressed again

module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8]      // DIP switches on IO Shield
) {
    sig rst     
    
    // the push buttons
    const UP = 0
    const CENTER = 1
    const DOWN = 2
    const LEFT = 3
    const RIGHT = 4
    const NBUTTONS = 5
    
    // the FSM
    enum State {A, B, SUM} // A: input a, B: input b, SUM: compute and show sum
    
    // the 4-digit BCD adder
    bcd_add_n bcda(#DIGITS(4))
    
    
    .clk(clk) {
        // The reset coditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        // debounce the button press
        btn_press btn_chk[NBUTTONS]  
        
        .rst(rst) {
            dff state[$width(State)](#INIT(State.A)) // state fsm
            dff digit_adder[4][4] // 4 bcd adders, one for each decimal digit
            dff a[4][4] // 4 bcd digits, a input for adder
            dff b[4][4] // 4 bcd digits, b input for adder
            dff digit_index[2] // the current decimal digit position in a or b
            dff sum[5][4] // the adder sum, 5 bcd digits 
            multi_seven_seg seg (#DIV($is_sim() ? 1 : 16), #DIGITS(4)) // 4 digit 7-segment display
        }
    }
    
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        // initial state of indicators
        led = 8h00
        io_led = 3x{{8h00}}       
        io_select = 4b1
        io_segment = 8b1
        // read dips switches, unused for now
        sig dips[3][8] = io_dip
        
        // initial adder state
        state.d = state.q
        
        // show currently active digit on AU leds [0-3]
        led[digit_index.q] = 1
        // show current digit value on right io_leds bank
        io_led[0][3:0] = digit_adder.q[digit_index.q]
        // show current state on left io_led bank [2:0]
        io_led[2][0] = state.q == State.A 
        io_led[2][1] = state.q == State.B
        io_led[2][2] = state.q == State.SUM
        
        // clear bcd adder
        bcda.a = 4x{{4h0}}
        bcda.b = 4x{{4h0}}
        bcda.carry_in = 1b0        
        
        // if aand b have been entered: do the addition and show the sum
        if (state.q == State.SUM) {
            bcda.a = a.q
            bcda.b = b.q
            bcda.carry_in = 0
            sum.d[3:0] = bcda.sum
            sum.d[4][0:0] = bcda.carry
        }
        // show the current a or b or sum digit values on display
        case (state.q) {
            State.A:
                seg.values = digit_adder.q
            State.B:
                seg.values = digit_adder.q
            default:
                seg.values = sum.q[3:0]
                io_led[2][7:7] = bcda.carry // overflow indicator
        }
        io_segment = ~seg.seg // connect segments to the driver
        io_select = ~seg.sel  // connect digit select to the driver
        
        // get debounced buttons pressed state
        btn_chk.btn_in[NBUTTONS-1:0] = io_button
        sig add = btn_chk.btn_down[UP]     
        sig sub = btn_chk.btn_down[DOWN]
        sig nxt = btn_chk.btn_down[LEFT]
        sig prv = btn_chk.btn_down[RIGHT]
        sig enter = btn_chk.btn_down[CENTER]
        
        if (add) { // inc the current digit 
            if (digit_adder.q[digit_index.q] == 9) {
                digit_adder.d[digit_index.q] = 0
            } else {
                digit_adder.d[digit_index.q] = digit_adder.q[digit_index.q] + 1
            }
        } else if (sub) { // dec the current digit 
            if (digit_adder.q[digit_index.q] == 0) {
                digit_adder.d[digit_index.q] = 9
            } else {
                digit_adder.d[digit_index.q] = digit_adder.q[digit_index.q] - 1
            }
        } else if (nxt) { // next digit position
            digit_index.d = digit_index.q + 1
        } else if (prv) { // previous digit position
            digit_index.d = digit_index.q - 1
        } else if (enter) { // advance state machine
            digit_index.d = 0 // reset to 1st digit
            case (state.q) {
                State.A:
                    a.d = digit_adder.q // remember x value
                    digit_adder.d = 4x{{4h0}}
                    state.d = State.B // go to next state
                State.B:
                    b.d = digit_adder.q // remember y value
                    digit_adder.d = 4x{{4h0}}
                    state.d = State.SUM // go to next state
                State.SUM:
                    state.d = State.A // go to next state
            }
        }
        
        usb_tx = usb_rx        // loop serial port      
    }
}
