// reference: https://natalieagus.github.io/50002/fpga/fpga_1
module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led[3][8],    // LEDs on IO Shield
    output io_segment[8],   // 7-segment LEDs on IO Shield
    output io_select[4],    // Digit select on IO Shield
    input io_button[5],     // 5 buttons on IO Shield
    input io_dip[3][8]      // DIP switches on IO Shield
) {
    // the push buttons
    const UP = 0
    const CENTER = 1
    const DOWN = 2
    const LEFT = 3
    const RIGHT = 4
    const NBUTTONS = 5
    
    sig add
    sig sub
    sig nxt
    sig prv
    sig go
    sig dips[3][8]
    
    sig rst                 
    
    .clk(clk) {
        // The reset coditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        btn_press btn_chk[NBUTTONS]
        
        .rst(rst) {
            dff adder[24]
        }
    }
    
    
    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        // initial state
        led = 8h00
        io_led = 3x{{8h00}}       
        io_select = 4b1
        io_segment = 8b1
        dips = io_dip
        
        // get debounced button state
        btn_chk.btn_in[NBUTTONS-1:0] = io_button
        add = btn_chk.btn_down[UP]     
        sub = btn_chk.btn_down[DOWN]
        nxt = btn_chk.btn_down[LEFT]
        prv = btn_chk.btn_down[RIGHT]
        go = btn_chk.btn_down[CENTER]
        
        // show button presses
        led[0] = add
        led[1] = sub
        led[2] = nxt
        led[3] = prv
        led[4] = go
 
        // update the counter
        if (add) {
            adder.d = adder.q + 1
        }
        if (sub) {
            adder.d = adder.q - 1
        }
        // and show on io_leds
        io_led = $build(adder.q, 3)
        
        
        usb_tx = usb_rx        // loop serial port
        io_segment = 8h_f_f
        io_select = 4h_f

        
        /*
        adder.x = io_dip[0]        // first 8-bit digit
        adder.y = io_dip[1]        // second 8 bit digit
        adder.cin = io_dip[2][0]   // carry in 
        io_led[1] = adder.sum      // sum
        io_led[2][0] = adder.cout  // carry out
        
        
        io_led[2][7] = io_button[UP]
        */
    }
}
