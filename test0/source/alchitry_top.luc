module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    input sck,     // spi clock
    input sdi,     // spi mosi
    //output sdo,    // spi miso
    input cs        // spi slave select
) {
    /*
    SPI Mode 0 = CPOL 0 CPHA 0
    SPI Mode 1 = CPOL 0 CPHA 1
    SPI Mode 2 = CPOL 1 CPHA 0
    SPI Mode 3 = CPOL 1 CPHA 1
    */    
    
    sig rst                 // reset signal
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        .rst(rst) {
            fifo s_f (#WIDTH(8), #ENTRIES(256))
            uart_rx rx (#BAUD(1000000), #CLK_FREQ(100000000))
            uart_tx tx (#BAUD(1000000), #CLK_FREQ(100000000))   
            spi_peripheral spi (#CPOL(0), #CPHA(0), .cs(cs), .sck(sck), .sdi(sdi))
        }
    }

        always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        rx.rx = usb_rx
        usb_tx = tx.tx
        
        spi.data_in = 8h00
                
        s_f.din = 0
        s_f.wput = 0
        s_f.rget = 0
        
        tx.block = 0
        
        if (! s_f.empty && !tx.busy ) {
            s_f.rget = 1
            tx.data = s_f.dout 
            tx.new_data = 1
            led = 8h00
        } else {
            tx.data = 0
            tx.new_data = 0
            led = 8h01
        }
        
        if (rx.new_data && !s_f.full) {
            s_f.din = rx.data
            s_f.wput = 1
            led = 8h02
        } else if (!s_f.full) {
            led = 8h03
        } else {
            led = 8hxx
        }      
    }
}